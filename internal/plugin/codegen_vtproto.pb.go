
// Code generated by protoc-gen-go-vtproto. DO NOT EDIT.
// protoc-gen-go-vtproto version: v0.3.0
// source: plugin/codegen.proto

package plugin

import (
	fmt "fmt"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	bits "math/bits"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

func (this *File) EqualVT(that *File) bool {
	if this == nil {
		return that == nil || fmt.Sprintf("%v", that) == ""
	} else if that == nil {
		return fmt.Sprintf("%v", this) == ""
	}
	if this.Name != that.Name {
		return false
	}
	if string(this.Contents) != string(that.Contents) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Override) EqualVT(that *Override) bool {
	if this == nil {
		return that == nil || fmt.Sprintf("%v", that) == ""
	} else if that == nil {
		return fmt.Sprintf("%v", this) == ""
	}
	if this.CodeType != that.CodeType {
		return false
	}
	if this.DbType != that.DbType {
		return false
	}
	if this.Nullable != that.Nullable {
		return false
	}
	if this.Column != that.Column {
		return false
	}
	if !this.Table.EqualVT(that.Table) {
		return false
	}
	if this.ColumnName != that.ColumnName {
		return false
	}
	if !this.GoType.EqualVT(that.GoType) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ParsedGoType) EqualVT(that *ParsedGoType) bool {
	if this == nil {
		return that == nil || fmt.Sprintf("%v", that) == ""
	} else if that == nil {
		return fmt.Sprintf("%v", this) == ""
	}
	if this.ImportPath != that.ImportPath {
		return false
	}
	if this.Package != that.Package {
		return false
	}
	if this.TypeName != that.TypeName {
		return false
	}
	if this.BasicType != that.BasicType {
		return false
	}
	if len(this.StructTags) != len(that.StructTags) {
		return false
	}
	for i := range this.StructTags {
		if this.StructTags[i] != that.StructTags[i] {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Settings) EqualVT(that *Settings) bool {
	if this == nil {
		return that == nil || fmt.Sprintf("%v", that) == ""
	} else if that == nil {
		return fmt.Sprintf("%v", this) == ""
	}
	if this.Version != that.Version {
		return false
	}
	if this.Engine != that.Engine {
		return false
	}
	if len(this.Schema) != len(that.Schema) {
		return false
	}
	for i := range this.Schema {
		if this.Schema[i] != that.Schema[i] {
			return false
		}
	}
	if len(this.Queries) != len(that.Queries) {
		return false
	}